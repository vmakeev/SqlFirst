public abstract class AsyncEnumerator<T> : IEnumerator<T>
{
	private bool _isDisposed;

	protected abstract Task<EnumerableItem<T>> Fetch();

	private T _current;

	/// <summary>Advances the enumerator to the next element of the collection.</summary>
	/// <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
	/// <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
	public bool MoveNext()
	{
		if (_isDisposed)
		{
			throw new ObjectDisposedException(nameof(AsyncEnumerator<T>));
		}

		EnumerableItem<T> item = Fetch().GetAwaiter().GetResult();

		if (!item.HasValue)
		{
			return false;
		}

		_current = item.Value;
		return true;
	}

	/// <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
	/// <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
	public void Reset()
	{
		if (_isDisposed)
		{
			throw new ObjectDisposedException(nameof(AsyncEnumerator<T>));
		}

		throw new NotImplementedException();
	}

	/// <summary>Gets the element in the collection at the current position of the enumerator.</summary>
	/// <returns>The element in the collection at the current position of the enumerator.</returns>
	public T Current
	{
		get
		{
			if (_isDisposed)
			{
				throw new ObjectDisposedException(nameof(AsyncEnumerator<T>));
			}

			return _current;
		}
	}

	/// <summary>Gets the current element in the collection.</summary>
	/// <returns>The current element in the collection.</returns>
	object IEnumerator.Current => Current;

	protected virtual void Dispose(bool disposing)
	{
		_isDisposed = true;
	}

	/// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	public void Dispose()
	{
		Dispose(true);
		GC.SuppressFinalize(this);
	}
}