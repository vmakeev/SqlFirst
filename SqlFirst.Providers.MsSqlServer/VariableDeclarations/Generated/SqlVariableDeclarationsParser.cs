//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\users\keeper\documents\visual studio 2015\Projects\ClassLibrary1\ClassLibrary1\SqlVariableDeclarations.g4 by ANTLR 4.6.4

// Unreachable code detected

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SqlFirst.Providers.MsSqlServer.VariableDeclarations.Generated {
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class SqlVariableDeclarationsParser : Parser {
	public const int
		DECLARE=1, INT=2, FLOAT=3, STRING=4, IDENTIFIER=5, VARIABLESIGN=6, LINEBREAK=7, 
		EQUATION=8, SPACE=9, TAB=10, OPEN_PRTH=11, CLOSE_PRTH=12, SEMICOLON=13, 
		SINGLELINE_COMMENTARY=14, MULTILINE_COMMENTATY=15;
	public const int
		RULE_root = 0, RULE_element = 1, RULE_declaration = 2, RULE_commentary = 3, 
		RULE_spaces = 4, RULE_space = 5, RULE_assignment = 6, RULE_value = 7, 
		RULE_string = 8, RULE_int = 9, RULE_float = 10, RULE_variable = 11, RULE_type = 12, 
		RULE_typeName = 13, RULE_size = 14, RULE_identifier = 15;
	public static readonly string[] ruleNames = {
		"root", "element", "declaration", "commentary", "spaces", "space", "assignment", 
		"value", "string", "int", "float", "variable", "type", "typeName", "size", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'@'", null, "'='", "' '", "'\t'", 
		"'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DECLARE", "INT", "FLOAT", "STRING", "IDENTIFIER", "VARIABLESIGN", 
		"LINEBREAK", "EQUATION", "SPACE", "TAB", "OPEN_PRTH", "CLOSE_PRTH", "SEMICOLON", 
		"SINGLELINE_COMMENTARY", "MULTILINE_COMMENTATY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SqlVariableDeclarations.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SqlVariableDeclarationsParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class RootContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SqlVariableDeclarationsParser.Eof, 0); }
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 32; element();
					}
					} 
				}
				State = 37;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 38; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public CommentaryContext commentary() {
			return GetRuleContext<CommentaryContext>(0);
		}
		public SpaceContext space() {
			return GetRuleContext<SpaceContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_element);
		try {
			State = 43;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; commentary();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42; space();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(SqlVariableDeclarationsParser.DECLARE, 0); }
		public SpacesContext[] spaces() {
			return GetRuleContexts<SpacesContext>();
		}
		public SpacesContext spaces(int i) {
			return GetRuleContext<SpacesContext>(i);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(SqlVariableDeclarationsParser.SEMICOLON, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(DECLARE);
			State = 46; spaces();
			State = 47; variable();
			State = 48; spaces();
			State = 49; type();
			State = 50; spaces();
			State = 54;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 51; assignment();
				State = 52; spaces();
				}
				break;
			}
			State = 56; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentaryContext : ParserRuleContext {
		public ITerminalNode SINGLELINE_COMMENTARY() { return GetToken(SqlVariableDeclarationsParser.SINGLELINE_COMMENTARY, 0); }
		public ITerminalNode MULTILINE_COMMENTATY() { return GetToken(SqlVariableDeclarationsParser.MULTILINE_COMMENTATY, 0); }
		public CommentaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentaryContext commentary() {
		CommentaryContext _localctx = new CommentaryContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_commentary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_la = _input.La(1);
			if ( !(_la==SINGLELINE_COMMENTARY || _la==MULTILINE_COMMENTATY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesContext : ParserRuleContext {
		public SpaceContext[] space() {
			return GetRuleContexts<SpaceContext>();
		}
		public SpaceContext space(int i) {
			return GetRuleContext<SpaceContext>(i);
		}
		public SpacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaces; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesContext spaces() {
		SpacesContext _localctx = new SpacesContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_spaces);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 60; space();
					}
					} 
				}
				State = 65;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(SqlVariableDeclarationsParser.SPACE, 0); }
		public ITerminalNode TAB() { return GetToken(SqlVariableDeclarationsParser.TAB, 0); }
		public ITerminalNode LINEBREAK() { return GetToken(SqlVariableDeclarationsParser.LINEBREAK, 0); }
		public SpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_space; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceContext space() {
		SpaceContext _localctx = new SpaceContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_space);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LINEBREAK) | (1L << SPACE) | (1L << TAB))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode EQUATION() { return GetToken(SqlVariableDeclarationsParser.EQUATION, 0); }
		public SpacesContext spaces() {
			return GetRuleContext<SpacesContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(EQUATION);
			State = 69; spaces();
			State = 70; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_value);
		try {
			State = 75;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; @string();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; @int();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74; @float();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SqlVariableDeclarationsParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(SqlVariableDeclarationsParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(SqlVariableDeclarationsParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLESIGN() { return GetToken(SqlVariableDeclarationsParser.VARIABLESIGN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(VARIABLESIGN);
			State = 84; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SpacesContext spaces() {
			return GetRuleContext<SpacesContext>(0);
		}
		public SizeContext size() {
			return GetRuleContext<SizeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; typeName();
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 87; spaces();
				State = 88; size();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public SpacesContext[] spaces() {
			return GetRuleContexts<SpacesContext>();
		}
		public SpacesContext spaces(int i) {
			return GetRuleContext<SpacesContext>(i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; identifier();
			State = 98;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 93; spaces();
					State = 94; identifier();
					}
					} 
				}
				State = 100;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeContext : ParserRuleContext {
		public ITerminalNode OPEN_PRTH() { return GetToken(SqlVariableDeclarationsParser.OPEN_PRTH, 0); }
		public SpacesContext[] spaces() {
			return GetRuleContexts<SpacesContext>();
		}
		public SpacesContext spaces(int i) {
			return GetRuleContext<SpacesContext>(i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE_PRTH() { return GetToken(SqlVariableDeclarationsParser.CLOSE_PRTH, 0); }
		public SizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_size; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeContext size() {
		SizeContext _localctx = new SizeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_size);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(OPEN_PRTH);
			State = 102; spaces();
			State = 103; @int();
			State = 104; spaces();
			State = 105; Match(CLOSE_PRTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SqlVariableDeclarationsParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVariableDeclarationsVisitor<TResult> typedVisitor = visitor as ISqlVariableDeclarationsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11p\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\a\x2$\n\x2\f\x2\xE\x2\'\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x5\x3.\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4\x39\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\a\x6@\n\x6\f\x6"+
		"\xE\x6\x43\v\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x5\tN\n\t"+
		"\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x5\xE]\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x63\n\xF\f\xF\xE\xF\x66\v\xF"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x2\x2"+
		"\x2\x12\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\x2\x4\x3\x2\x10\x11\x4\x2\t\t\v\f"+
		"h\x2%\x3\x2\x2\x2\x4-\x3\x2\x2\x2\x6/\x3\x2\x2\x2\b<\x3\x2\x2\x2\n\x41"+
		"\x3\x2\x2\x2\f\x44\x3\x2\x2\x2\xE\x46\x3\x2\x2\x2\x10M\x3\x2\x2\x2\x12"+
		"O\x3\x2\x2\x2\x14Q\x3\x2\x2\x2\x16S\x3\x2\x2\x2\x18U\x3\x2\x2\x2\x1AX"+
		"\x3\x2\x2\x2\x1C^\x3\x2\x2\x2\x1Eg\x3\x2\x2\x2 m\x3\x2\x2\x2\"$\x5\x4"+
		"\x3\x2#\"\x3\x2\x2\x2$\'\x3\x2\x2\x2%#\x3\x2\x2\x2%&\x3\x2\x2\x2&(\x3"+
		"\x2\x2\x2\'%\x3\x2\x2\x2()\a\x2\x2\x3)\x3\x3\x2\x2\x2*.\x5\x6\x4\x2+."+
		"\x5\b\x5\x2,.\x5\f\a\x2-*\x3\x2\x2\x2-+\x3\x2\x2\x2-,\x3\x2\x2\x2.\x5"+
		"\x3\x2\x2\x2/\x30\a\x3\x2\x2\x30\x31\x5\n\x6\x2\x31\x32\x5\x18\r\x2\x32"+
		"\x33\x5\n\x6\x2\x33\x34\x5\x1A\xE\x2\x34\x38\x5\n\x6\x2\x35\x36\x5\xE"+
		"\b\x2\x36\x37\x5\n\x6\x2\x37\x39\x3\x2\x2\x2\x38\x35\x3\x2\x2\x2\x38\x39"+
		"\x3\x2\x2\x2\x39:\x3\x2\x2\x2:;\a\xF\x2\x2;\a\x3\x2\x2\x2<=\t\x2\x2\x2"+
		"=\t\x3\x2\x2\x2>@\x5\f\a\x2?>\x3\x2\x2\x2@\x43\x3\x2\x2\x2\x41?\x3\x2"+
		"\x2\x2\x41\x42\x3\x2\x2\x2\x42\v\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45"+
		"\t\x3\x2\x2\x45\r\x3\x2\x2\x2\x46G\a\n\x2\x2GH\x5\n\x6\x2HI\x5\x10\t\x2"+
		"I\xF\x3\x2\x2\x2JN\x5\x12\n\x2KN\x5\x14\v\x2LN\x5\x16\f\x2MJ\x3\x2\x2"+
		"\x2MK\x3\x2\x2\x2ML\x3\x2\x2\x2N\x11\x3\x2\x2\x2OP\a\x6\x2\x2P\x13\x3"+
		"\x2\x2\x2QR\a\x4\x2\x2R\x15\x3\x2\x2\x2ST\a\x5\x2\x2T\x17\x3\x2\x2\x2"+
		"UV\a\b\x2\x2VW\x5 \x11\x2W\x19\x3\x2\x2\x2X\\\x5\x1C\xF\x2YZ\x5\n\x6\x2"+
		"Z[\x5\x1E\x10\x2[]\x3\x2\x2\x2\\Y\x3\x2\x2\x2\\]\x3\x2\x2\x2]\x1B\x3\x2"+
		"\x2\x2^\x64\x5 \x11\x2_`\x5\n\x6\x2`\x61\x5 \x11\x2\x61\x63\x3\x2\x2\x2"+
		"\x62_\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2"+
		"\x2\x2\x65\x1D\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gh\a\r\x2\x2hi\x5\n\x6\x2"+
		"ij\x5\x14\v\x2jk\x5\n\x6\x2kl\a\xE\x2\x2l\x1F\x3\x2\x2\x2mn\a\a\x2\x2"+
		"n!\x3\x2\x2\x2\t%-\x38\x41M\\\x64";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SqlFirst.Providers.MsSqlServer.VariableDeclarations
