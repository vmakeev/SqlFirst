/// <summary>
/// Выполняет вызов хранимой процедуры и возвращает дополнительные данные
/// </summary>
/// <param name="connection">Подключение к БД</param>
/// <param name="firstParam">FirstParam</param>
/// <param name="secondParam">SECOND_Param</param>
/// <param name="thirdParam">thirdParam</param>
/// <param name="cancellationToken">Токен отмены</param>
/// <returns>Результаты выполнения запроса</returns>
public virtual async Task<IEnumerable<QueryItemTestName>> ExecAsync(DbConnection connection, Guid? firstParam, int? secondParam, DataTable thirdParam, CancellationToken cancellationToken)
{
	using(DbCommand cmd = connection.CreateCommand())
	{
		cmd.CommandText = GetQueryText();
		AddParameter(cmd, MySpecificDbType.MySpecificGuidType, "@FirstParam", firstParam);
		AddParameter(cmd, MySpecificDbType.MySpecificIntType, "@SECOND_Param", secondParam);
		AddCustomParameter(cmd, "sometabletype", "@thirdParam", thirdParam);

		var result = new List<QueryItemTestName>();
		using (DbDataReader reader = await cmd.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false))
		{
			while (await reader.ReadAsync(cancellationToken).ConfigureAwait(false))
			{
				QueryItemTestName resultItem = GetItemFromRecord(reader);
				result.Add(resultItem);
			}
		}

		return result;
	}
}